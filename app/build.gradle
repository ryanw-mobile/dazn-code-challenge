plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'dagger.hilt.android.plugin'
    id "org.jlleitschuh.gradle.ktlint" version "12.0.3"
}

android {
    compileSdk 34

    signingConfigs {
        release {
            def isRunningOnCI = System.getenv("BITRISE") == "true"
            def keystorePropertiesFile = file('../../keystore.properties')

            if (isRunningOnCI || !keystorePropertiesFile.exists()) {
                storeFile = file(System.getenv("KEYSTORE_LOCATION"))
                storePassword = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
                keyAlias = System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
                keyPassword = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            } else {
                Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(keystorePropertiesFile))
                storeFile = file(keyProps["store"])
                keyAlias = keyProps["alias"]
                storePassword = keyProps["storePass"]
                keyPassword = keyProps["pass"]
            }
        }
    }

    defaultConfig {
        applicationId "uk.ryanwong.dazn.codechallenge"
        minSdk 28
        targetSdk 34
        versionCode 4
        versionName "1.1.2"
        resourceConfigurations += ['en']

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "uk.ryanwong.dazn.codechallenge.CustomTestRunner"

        // Bundle output filename
        setProperty("archivesBaseName", "dazn-" + versionName + "-" + new Date().format('yyyyMMdd-HHmmss'))
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "dazn-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "dazn-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        dataBinding true
        buildConfig true
    }

    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
        }
    }

    testOptions {
        animationsDisabled = true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/licenses/ASM']
            pickFirsts += ['win32-x86-64/attach_hotspot_windows.dll', 'win32-x86/attach_hotspot_windows.dll']
        }
    }
    namespace 'uk.ryanwong.dazn.codechallenge'


    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }
}

dependencies {

    // Kotlin and coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.22"

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation "androidx.recyclerview:recyclerview:1.3.2"

    // Constraint Layout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    kapt "androidx.lifecycle:lifecycle-common-java8:2.6.2"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Core with Ktx
    implementation 'androidx.core:core-ktx:1.12.0'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation 'com.jakewharton.timber:timber:5.0.1'
    // Firebase services
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-crashlytics'

    // Dependencies for local unit tests
    testImplementation "junit:junit:$junit_version"
    testImplementation('com.google.truth:truth:1.2.0') {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }

    // AndroidX Test - JVM testing
    testImplementation "androidx.test:core-ktx:$test_core_version"
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation "androidx.test.ext:junit-ktx:$test_ext_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'


    // AndroidX Test - Instrumented testing
    androidTestImplementation "androidx.test.ext:junit:$test_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation "junit:junit:$junit_version"
    debugImplementation 'androidx.fragment:fragment-testing:1.6.2'
    implementation "androidx.test:core-ktx:$test_core_version"
    // runBlockingTest replacement
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    androidTestImplementation('com.google.truth:truth:1.2.0') {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }

    // Dependencies for Android instrumented unit tests
    androidTestImplementation 'org.mockito:mockito-core:5.8.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.3'
    androidTestImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"

    // ExoplayerActivity
    implementation 'com.google.android.exoplayer:exoplayer:2.19.1'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    // For instrumented tests - with Kotlin
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.13'
}
